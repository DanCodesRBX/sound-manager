{"searchDocs":[{"title":"SoundPack","type":0,"sectionRef":"#","url":"/SoundManager/api/SoundPack","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"SoundPack","url":"/SoundManager/api/SoundPack#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"SoundPack","url":"/SoundManager/api/SoundPack#new","content":"&lt;/&gt; SoundPack.new(sounds: {Sound }) → SoundPack Creates a new SoundPack  ","version":null,"tagName":"h3"},{"title":"Pick​","type":1,"pageTitle":"SoundPack","url":"/SoundManager/api/SoundPack#Pick","content":"&lt;/&gt; SoundPack:Pick() → () Returns a random sound from inside the SoundPack ","version":null,"tagName":"h3"},{"title":"SoundManager","type":0,"sectionRef":"#","url":"/SoundManager/api/SoundManager","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#functions","content":" ","version":null,"tagName":"h2"},{"title":"Play​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#Play","content":"This item only works when running on the client. Client This item only works when running on the server. Server &lt;/&gt; SoundManager.Play( sound: Sound , players: {Player }? ) → () Plays a one-shot sound. Players to replicate to can be specified on the server.  ","version":null,"tagName":"h3"},{"title":"PlayAt​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#PlayAt","content":"This item only works when running on the client. Client This item only works when running on the server. Server &lt;/&gt; SoundManager.PlayAt( sound: Sound , at: Vector3 , players: {Player }? ) → () Plays a one-shot sound at a position in the world. Players to replicate to can be specified on server  ","version":null,"tagName":"h3"},{"title":"BeforePlayed​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#BeforePlayed","content":"This item only works when running on the client. Client &lt;/&gt; SoundManager.BeforePlayed( sound: Sound , callback: (sound: Sound ) → () ) → Disconnect ","version":null,"tagName":"h3"},{"title":"Types","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager##","content":"","version":null,"tagName":"h3"},{"title":"​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#Disconnect","content":"type Disconnect = () → ()  Fires before the specified sound plays Can be used to add the modulate effect or similar WARNING You should not yield inside the callback.  ","version":null,"tagName":"h3"},{"title":"BeforePackPlayed​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#BeforePackPlayed","content":"&lt;/&gt; SoundManager.BeforePackPlayed( soundPack: SoundPack, callback: (sound: Sound ) → () ) → () Same as BeforePlayed but sets the same callback for every sound in a SoundPack. WARNING You should not yield inside the callback.  ","version":null,"tagName":"h3"},{"title":"Modulate​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#Modulate","content":"This item only works when running on the client. Client &lt;/&gt; SoundManager.Modulate( sound: Sound , spread: number? ) → () Modulates the specified sound's pitch using a pitch shift effect  ","version":null,"tagName":"h3"},{"title":"newPack​","type":1,"pageTitle":"SoundManager","url":"/SoundManager/api/SoundManager#newPack","content":"&lt;/&gt; SoundManager.newPack(sounds: {Sound }) → SoundPack Creates a new SoundPack object. ","version":null,"tagName":"h3"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/SoundManager/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Pesde Configuration​","type":1,"pageTitle":"Getting Started","url":"/SoundManager/docs/intro#pesde-configuration","content":" Once Pesde is installed, run pesde init on your project directory, and then add this module by using pesde add dancodesrbx/soundpack --alias SoundPack  To install, run pesde install within your project. Pesde will create a roblox_packages folder in your directory with the dependency.  ","version":"Next","tagName":"h2"},{"title":"Rojo Configuration​","type":1,"pageTitle":"Getting Started","url":"/SoundManager/docs/intro#rojo-configuration","content":" The roblox_packages folder created by Pesde should be synced into Roblox Studio through your Rojo configuration. For instance, a Rojo configuration might have the following entry to sync the roblox_packages folder into ReplicatedStorage:  { &quot;name&quot;: &quot;sound-manager-example&quot;, &quot;tree&quot;: { &quot;$className&quot;: &quot;DataModel&quot;, &quot;ReplicatedStorage&quot;: { &quot;$className&quot;: &quot;ReplicatedStorage&quot;, &quot;Packages&quot;: { &quot;$path&quot;: &quot;roblox_packages&quot; } } } }   ","version":"Next","tagName":"h2"},{"title":"Usage Examples​","type":1,"pageTitle":"Getting Started","url":"/SoundManager/docs/intro#usage-examples","content":" ","version":"Next","tagName":"h2"},{"title":"Client​","type":1,"pageTitle":"Getting Started","url":"/SoundManager/docs/intro#client","content":" local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) -- Require SoundManager local SoundManager = require(ReplicatedStorage.Packages.SoundManager) -- Locate sounds local Sounds = ReplicatedStorage.Packages.Sounds -- Play sounds SoundManager.Play(Sounds.Pop) SoundManager.PlayAt(Sounds.Whack, Vector3.zero)   ","version":"Next","tagName":"h3"},{"title":"Server​","type":1,"pageTitle":"Getting Started","url":"/SoundManager/docs/intro#server","content":" local ReplicatedStorage = game:GetService(&quot;ReplicatedStorage&quot;) local Players = game:GetService(&quot;Players&quot;) -- Require SoundManager local SoundManager = require(ReplicatedStorage.Packages.SoundManager) -- Locate sounds local Sounds = ReplicatedStorage.Packages.Sounds -- An optional player list local playersToSendTo = {Players.wastbo} -- Play sounds SoundManager.Play(Sounds.Pop, playersToSendTo) SoundManager.PlayAt(Sounds.Whack, Vector3.zero, playersToSendTo)   Optimization  SoundManager uses buffers alongside a caching system to deliver optimal network usage. Using an UnreliableRemoteEvent ensures that sounds won't have a heavy impact on ping. ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}